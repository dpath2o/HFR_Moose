package HFR::Math;

use 5.012003;
use strict;
use warnings;

require Exporter;

our @ISA = qw(Exporter);

# Items to export into callers namespace by default. Note: do not export
# names by default without a very good reason. Use EXPORT_OK instead.
# Do not simply export all your public functions/methods/constants.

# This allows declaration	use HFR::Math ':all';
# If you do not need this, moving things directly into @EXPORT or @EXPORT_OK
# will save memory.
our %EXPORT_TAGS = ( 'all' => [ qw() ] );

our @EXPORT_OK = ( @{ $EXPORT_TAGS{'all'} } );

our @EXPORT = qw();

our $VERSION = '0.01';

################################################################################
sub true_north_degrees_to_spherical_coordinate_degrees {

  my $true_north_degrees = shift;

  my $theta = 90 - $true_north_degrees;
  $theta .= $theta % 360;

  return $theta;

}
################################################################################
sub distance_two_points_practical {

  my ($lon1,$lat1,$lon2,$lat2) = @_;

  $lat1 = deg2rad($lat1);
  my $y = (111132.92-559.82 * cos(2*$lat1)) + (1.175 * cos(4*$lat1)) - (0.0023 * cos(6*$lat1));
  my $x = (111412.84 * cos($lat1)) - (93.5 * cos(3*$lat1)) + (0.0118 * cos(5*$lat1));
  my $e = ($lon2-$lon1) * $x;
  my $n = ($lat2-$lat1) * $y;
  my $D = sqrt( $e ** 2 + $n ** 2 ) / 1.0e4;

  return $D;

}
################################################################################
sub distance_haversine {

  my ($lon1,$lat1,$lon2,$lat2) = @_;

  $lat1 = deg2rad($lat1);
  $lon1 = deg2rad($lon1);
  $lat2 = deg2rad($lat2);
  $lon2 = deg2rad($lon2);

  my $dlon  = $lon1-$lon2;
  my $dlat  = $lat1-$lat2;

  # the square of half the chord length between the points
  my $a = sin($dlat/2) ** 2 + cos($lat1) * cos($lat2) * (sin($dlon/2)) ** 2 ; 
  # angular distance in radians
  my $c = 2 * atan2(sqrt($a), sqrt(1-$a)); 
  my $D = earth_radius * $c; # kilometres

  return $D;

}
################################################################################
sub distance_law_of_cosines {

  my ($lon1,$lat1,$lon2,$lat2) = @_;

  $lat1 = deg2rad($lat1);
  $lon1 = deg2rad($lon1);
  $lat2 = deg2rad($lat2);
  $lon2 = deg2rad($lon2);

  my $D = acos( sin($lat1) * sin($lat2) + cos($lat1) * cos($lat2) * cos($lon1-$lon2)) * earth_radius; # kilometers

  return $D;

}
################################################################################
sub peak_rayleigh {

    my $pwr = shift;

    my $n_coefs = 7;
    my $n_bins = 20; #alternative method: $n_bins = MATLAB_CODE< length( min(pwr) : (min(pwr)/max(pwr)) : max(pwr) ) >
    my $confidence_interval_95 = 7.77;

    # POLYNOMICAL CALCULATION CRITERION
    # specifies the criterion to be used in determining the degree of fit to be computed.
    # (1)  If  EPS  is input negative,  POLFIT  chooses the
    #    degree based on a statistical F test of
    #    significance.  One of three possible
    #    significance levels will be used:  .01, .05 or
    #    .10.  If  EPS=-1.0 , the routine will
    #    automatically select one of these levels based
    #    on the number of data points and the maximum
    #    degree to be considered.  If  EPS  is input as
    #    -.01, -.05, or -.10, a significance level of
    #    .01, .05, or .10, respectively, will be used.
    # (2)  If  EPS  is set to 0.,  POLFIT  computes the
    #    polynomials of degrees 0 through  MAXDEG .
    # (3)  If  EPS  is input positive,  EPS  is the RMS
    #    error tolerance which must be satisfied by the
    #    fitted polynomial.  POLFIT  will increase the
    #    degree of fit until this criterion is met or
    #    until the maximum degree is reached.C
    my $poly_criterion = 0; 

    # POLYFIT
    # Use the coefficients generated by POLFIT to evaluate the
    #    polynomial fit of degree L, along with the first NDER of
    #    its derivatives, at a specified point.
    #  Input --
    #      L -      the degree of polynomial to be evaluated.  L  may be
    #               any non-negative integer which is less than or equal
    #               to  NDEG , the highest degree polynomial provided
    #               by  POLFIT .
    #      NDER -   the number of derivatives to be evaluated.  NDER
    #               may be 0 or any positive value.  If NDER is less
    #               than 0, it will be treated as 0.
    #      X -      the argument at which the polynomial and its
    #               derivatives are to be evaluated.
    #      A -      work and output array containing values from last
    #               call to  POLFIT .
    my $nder = 1;

    my $pwr_rng = zeros(abs(($pwr->max)-($pwr->min)),1)->xlinvals($pwr->min,$pwr->max);
    my($bin_centres,$n_pwr) = hist( $pwr , $pwr->min , $pwr->max , abs($pwr->max - $pwr->min)/$n_bins );

    # compute weighs for polynomial fit and the fit the data to the polynomial, then extract the polynomial values
    my $pwr_weights = 1.0/$bin_centres**2;
    my($ndeg,$jk0,$jk1,$pfit_coefs) = polyfit($n_pwr,$bin_centres,$pwr_weights,$n_coefs,$poly_criterion); undef $jk0; undef $jk1;
    my $pwr_coefs = polyvalue($n_coefs,$nder,$pwr_rng,$pfit_coefs);

    # using the index of the maximum power determine the theshold for the regions
    my($min_pwr_coefs,$max_pwr_coefs,$minI_pwr_coefs,$maxI_pwr_coefs) = minmaximum($pwr_coefs);
    my $pwr_thresh = ($pwr_rng($maxI_pwr_coefs) + $confidence_interval_95)->max;

    return($pwr_thresh);

}

1;
__END__
# Below is stub documentation for your module. You'd better edit it!

=head1 NAME

HFR::Math - Perl extension for blah blah blah

=head1 SYNOPSIS

  use HFR::Math;
  blah blah blah

=head1 DESCRIPTION

Stub documentation for HFR::Math, created by h2xs. It looks like the
author of the extension was negligent enough to leave the stub
unedited.

Blah blah blah.

=head2 EXPORT

None by default.



=head1 SEE ALSO

Mention other useful documentation such as the documentation of
related modules or operating system documentation (such as man pages
in UNIX), or any relevant external documentation such as RFCs or
standards.

If you have a mailing list set up for your module, mention it here.

If you have a web site set up for your module, mention it here.

=head1 AUTHOR

Daniel Patrick Lewis Atwater, E<lt>dpath2o@apple.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2013 by Daniel Patrick Lewis Atwater

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.12.3 or,
at your option, any later version of Perl 5 you may have available.


=cut
