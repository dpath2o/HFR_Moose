.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HFR::ACORN 3"
.TH HFR::ACORN 3 "2013-08-08" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HFR\-ACORN \- for use with HF radar (HFR) and Australian Coastal Ocean Radar Network (ACORN) data.
.SH "VERSION"
.IX Header "VERSION"
Version 1.45
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In a broad sense HFR-ACORN perl module is intended to be used as a class which utilises methods for manipulating \s-1ACORN\s0 derived data.  Plainly speaking, what we the author intends is that this module be used in an object-orientated way for extracting, visualising and running various computations on \s-1ACORN\s0 derived data.
.PP
Here's a quick example of one the myriad of possible uses. Say you'd like to build a list of radial files from \s-1ACORN\s0 Guilderton (\s-1GUI\s0) station for certain time period:
.PP
\&\s-1EXAMPLE\s0
\&\f(CW\*(C`<use HFR::ACORN;\*(C'\fR>
\&\f(CW\*(C`<use PDL::Lite;\*(C'\fR>
\&\f(CW\*(C`<use PDL::Char;\*(C'\fR>
\&\f(CW\*(C`<$acorn = HFR::ACORN\-\*(C'\fRnew( sos => 'guilderton' , start => '12 sep 2011' , stop => '12 sep 2012 01:30' );>>
\&\f(CW\*(C`<$acorn\-\*(C'\fRHFR::ACORN::FileOps::construct_file_list;>>
\&\f(CW\*(C`<if (\-e $acorn\-\*(C'\fR{full_file_list}\->\fIatstr\fR\|(0)) { print \*(L"$_ exists\en\*(R"; } else { print \*(L"$_ does \s-1NOT\s0 exists\en\*(R"; }>>
.PP
The above example checks to see if first file list of files created exists and prints a message on its existence.
Plenty of assumptions (default parameters) are made in the above example when calling \f(CW\*(C`<HFR::ACORN\-\*(C'\fRnew>> (see below for the list of those parameters).
.PP
\&\fB\s-1NOTE\s0\fR: The backbone of \s-1HFR::ACORN\s0 is the \fB\s-1YAML\s0 configuration file\fR. See \s-1HFR::YAML\s0.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.ie n .IP """<new"">" 4
.el .IP "\f(CW<new\fR>" 4
.IX Item "<new>"
Returns a new \s-1ACORN\s0 object, which has loaded the file configuration file (see \s-1HFR::YAML\s0)
.SS "new"
.IX Subsection "new"
.SS "is_wera"
.IX Subsection "is_wera"
Given \f(CW\*(C`<$acorn\-\*(C'\fR{sos}>> check to see if that name is a \fI<\s-1WERA\s0 station or site\fR>
.SS "is_site"
.IX Subsection "is_site"
Given \f(CW\*(C`<$acorn\-\*(C'\fR{sos}>> check to see if that name is a \fI<site\fR>
.SS "is_site_seasonde"
.IX Subsection "is_site_seasonde"
Given \f(CW\*(C`<$acorn\-\*(C'\fR{sos}>> check to see if that name is a \fI<SeaSonde site\fR>
.SS "is_site_wera"
.IX Subsection "is_site_wera"
Given \f(CW\*(C`<$acorn\-\*(C'\fR{sos}>> check to see if that name is a \fI<\s-1WERA\s0 site\fR>
.SS "determine_site"
.IX Subsection "determine_site"
Given \f(CW\*(C`<$acorn\-\*(C'\fR{sos}>> return \f(CW\*(C`<$acorn\-\*(C'\fR{site}>>
.SS "determine_datetime"
.IX Subsection "determine_datetime"
Given both \f(CW\*(C`<$acorn\-\*(C'\fR{start}>> \fIand\fR \f(CW\*(C`<$acorn\-\*(C'\fR{stop}>> are defined as parse-able date-string then
return \f(CW\*(C`<$acorn\-\*(C'\fR{start}>> and \f(CW\*(C`<$acorn\-\*(C'\fR{stop}>> as \s-1POSIX\s0 time as a \s-1PDL\s0 scalar.
See
.SS "define_datestrs"
.IX Subsection "define_datestrs"
.SS "determine_delta_time"
.IX Subsection "determine_delta_time"
.SS "determine_offset_time"
.IX Subsection "determine_offset_time"
.SS "determine_codename"
.IX Subsection "determine_codename"
.SH "AUTHOR"
.IX Header "AUTHOR"
Atwater, Daniel Patrick Lewis, \f(CW\*(C`<danielpath2o at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-hfr\-acorn at rt.cpan.org\*(C'\fR, or through
the web interface at http://rt.cpan.org/NoAuth/ReportBug.html?Queue=HFR\-ACORN <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=HFR-ACORN>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc HFR::ACORN
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker (report bugs here)
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=HFR\-ACORN <http://rt.cpan.org/NoAuth/Bugs.html?Dist=HFR-ACORN>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/HFR\-ACORN <http://annocpan.org/dist/HFR-ACORN>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/HFR\-ACORN <http://cpanratings.perl.org/d/HFR-ACORN>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/HFR\-ACORN/ <http://search.cpan.org/dist/HFR-ACORN/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2012 Atwater, Daniel Patrick Lewis.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See <http://dev.perl.org/licenses/> for more information.
